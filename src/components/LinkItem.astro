---
import type { LinkEntry } from "../data/links";

import astroSvg from "../assets/svgs/astro.svg";
import cssSvg from "../assets/svgs/css.svg";
import expressSvg from "../assets/svgs/express.svg";
import htmlSvg from "../assets/svgs/html.svg";
import javascriptSvg from "../assets/svgs/javascript.svg";
import nodeSvg from "../assets/svgs/nodejs.svg";
import pythonSvg from "../assets/svgs/python.svg";
import reactSvg from "../assets/svgs/react.svg";

const { link } = Astro.props as { link: LinkEntry };

const iconFallbacks: Record<string, string> = {
  astro: astroSvg.src,
  css: cssSvg.src,
  express: expressSvg.src,
  html: htmlSvg.src,
  javascript: javascriptSvg.src,
  js: javascriptSvg.src,
  node: nodeSvg.src,
  nodejs: nodeSvg.src,
  python: pythonSvg.src,
  react: reactSvg.src,
};

const normalizedSlug = link.slug.toLowerCase();
const normalizedCategory = link.category?.toLowerCase().trim() ?? "";

const resolvedIcon =
  link.icon ??
  iconFallbacks[normalizedSlug] ??
  iconFallbacks[normalizedCategory] ??
  astroSvg.src;

const isEmojiIcon =
  resolvedIcon.length <= 4 &&
  !resolvedIcon.includes("/") &&
  !resolvedIcon.includes(".");

const ICON_COLOR = "#B41D33";

const iconContainerStyle = `color: ${ICON_COLOR}`;
const iconImageStyle = !isEmojiIcon
  ? [
      `background-color: ${ICON_COLOR}`,
      `mask: url(${resolvedIcon}) center / contain no-repeat`,
      `-webkit-mask: url(${resolvedIcon}) center / contain no-repeat`,
    ].join("; ")
  : undefined;

const href = link.internal ? link.url : `/go/${link.slug}`;
const isExternal = !link.internal;
const relAttrs = isExternal ? "noreferrer noopener" : undefined;
const targetAttr = isExternal ? "_blank" : undefined;
---

<a
  class="link-item glass anim-soft-in anim-base"
  href={href}
  rel={relAttrs}
  target={targetAttr}
  aria-label={`${link.title} â€“ ${link.description ?? "Open link"}`}
>
  <span class="link-item__overlay" aria-hidden="true"></span>
  <span
    class={`link-item__icon ${isEmojiIcon ? "is-emoji" : ""}`}
    aria-hidden="true"
    style={iconContainerStyle}
  >
    {
      isEmojiIcon ? (
        resolvedIcon
      ) : (
        <span class="link-item__icon-image" style={iconImageStyle} />
      )
    }
  </span>

  <span class="link-item__content">
    <span class="link-item__heading">
      <span class="link-item__title">{link.title}</span>
      {
        link.category && (
          <span class="link-item__category">{link.category}</span>
        )
      }
    </span>
    {
      link.description && (
        <span class="link-item__description">{link.description}</span>
      )
    }
  </span>

  <span class="link-item__cta" aria-hidden="true">
    <svg
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      stroke-width="1.6"
    >
      <path
        stroke-linecap="round"
        stroke-linejoin="round"
        d="M5 12h14M13 6l6 6-6 6"></path>
    </svg>
  </span>
</a>

<style>
  .link-item {
    position: relative;
    display: grid;
    grid-template-columns: auto 1fr auto;
    align-items: center;
    gap: clamp(14px, 1.8vw, 22px);
    padding: clamp(16px, 1.8vw, 22px) clamp(18px, 2.4vw, 28px);
    border-radius: var(--radius-lg);
    color: inherit;
    text-decoration: none;
    overflow: hidden;
    isolation: isolate;
    transition:
      transform var(--motion-duration-md) var(--motion-ease-emphasized),
      background var(--motion-duration-md) var(--motion-ease-standard),
      box-shadow var(--motion-duration-md) var(--motion-ease-standard);
  }

  .link-item:hover {
    transform: translateY(-4px);
    box-shadow: 0 16px 40px -14px rgb(0 0 0 / 0.65);
  }

  .link-item:focus-visible {
    box-shadow:
      0 0 0 2px rgb(var(--accent-1) / 0.6),
      0 0 0 5px rgb(var(--glass) / 0.45);
  }

  .link-item__overlay {
    position: absolute;
    inset: -40%;
    background: radial-gradient(
      circle at top right,
      rgb(var(--accent-1) / 0.22),
      transparent 60%
    );
    opacity: 0;
    transition: opacity var(--motion-duration-md) var(--motion-ease-standard);
    z-index: -1;
  }

  .link-item:hover .link-item__overlay {
    opacity: 1;
  }

  .link-item__icon {
    width: clamp(48px, 4.6vw, 56px);
    height: clamp(48px, 4.6vw, 56px);
    display: inline-flex;
    align-items: center;
    justify-content: center;
    border-radius: var(--radius-md);
    background: rgb(var(--glass) / 0.08);
    border: 1px solid rgb(var(--glass) / 0.16);
    box-shadow:
      0 6px 20px -10px rgb(0 0 0 / 0.65),
      0 0 0 1px rgb(var(--glass) / 0.12) inset;
    transition: transform var(--motion-duration-md)
      var(--motion-ease-emphasized);
  }

  .link-item:hover .link-item__icon {
    transform: scale(1.05);
  }

  .link-item__icon.is-emoji {
    font-size: clamp(1.8rem, 1.5rem + 0.8vw, 2.3rem);
  }

  .link-item__icon-image {
    display: block;
    width: 70%;
    height: 70%;
    filter: drop-shadow(0 6px 16px rgb(0 0 0 / 0.35));
  }

  .link-item__content {
    display: grid;
    gap: 6px;
    justify-items: start;
  }

  .link-item__heading {
    display: flex;
    flex-wrap: wrap;
    align-items: center;
    gap: 8px;
  }

  .link-item__title {
    font-size: clamp(1.05rem, 0.98rem + 0.3vw, 1.28rem);
    font-weight: 600;
    letter-spacing: 0.01em;
  }

  .link-item__category {
    padding: 4px 10px;
    border-radius: var(--radius-pill);
    background: rgb(var(--glass) / 0.14);
    border: 1px solid rgb(var(--glass) / 0.2);
    font-size: clamp(0.68rem, 0.62rem + 0.18vw, 0.78rem);
    letter-spacing: 0.06em;
    text-transform: uppercase;
    color: rgb(var(--text-1));
  }

  .link-item__description {
    font-size: clamp(0.82rem, 0.76rem + 0.18vw, 0.9rem);
    color: rgb(var(--text-1));
    text-align: left;
    display: block;
    width: 100%;
  }

  .link-item__cta {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    width: clamp(34px, 3.6vw, 42px);
    height: clamp(34px, 3.6vw, 42px);
    border-radius: var(--radius-md);
    background: rgb(var(--glass) / 0.08);
    border: 1px solid rgb(var(--glass) / 0.14);
    color: rgb(var(--text-0));
    opacity: 0.9;
    transition:
      transform var(--motion-duration-md) var(--motion-ease-emphasized),
      opacity var(--motion-duration-sm) var(--motion-ease-standard);
  }

  .link-item:hover .link-item__cta {
    transform: translateX(4px);
    opacity: 1;
  }

  .link-item__cta svg {
    width: 18px;
    height: 18px;
  }

  @media (max-width: 640px) {
    .link-item {
      grid-template-columns: auto 1fr;
      grid-template-rows: auto auto;
      gap: 14px;
    }

    .link-item__cta {
      grid-column: 2 / -1;
      grid-row: 2;
      justify-self: end;
    }
  }
</style>
